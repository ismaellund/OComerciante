package view;

/*
 * Universidade do Sul de Santa Catarina - UNISUL
 * Disciplina: Programação Linear e Grafos
 * Prof. Osmar de Oliveira Braz Junior
 *
 * O projeto tem como objetivo procurar um caminho minimo entre todos
 * os vértices obtidos com base da abstração de um problema.
 *
 * Este utiliza o algoritmo Dijkstra,
 * implementado na linguagem Java pelo Prof. Osmar de Oliveira Braz Junior 
 * com base nos livro de Thomas Cormen.
 */

/**
 * JFrame Principal da aplicação, referente ao problema proposto e abstraido
 * para a teoria de grafos.
 *
 * @version 1.02.01
 *
 * @authors Ismael Piloto Lund & Fernando Moosher Felix
 */

import grafoDijkstra.Dijkstra;
import grafoDijkstra.Grafo;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class JFramePrincipal extends javax.swing.JFrame {

    //Cria um image icon baseado na imagem do mapa do problema
    ImageIcon imageIcon = new ImageIcon(getClass().getResource("mapa.png"));

    //Instancia um grafo
    Grafo grafo = new Grafo();
    //Instancia uma matriz de adjacencia com base no grafo
    int G[][] = grafo.getG();

    public JFramePrincipal() {
        //Inicia os componentes criados e organizados pela ferramenta projeto da IDE NetBeans
        initComponents();
    }

    /**
     * Código Gerado automaticamente pelo Projeto Swing do NetBeans: This method
     * is called from within the constructor to initialize the form. WARNING: Do
     * NOT modify this code. The content of this method is always regenerated by
     * the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = new java.awt.Canvas();
        Mapa = new javax.swing.JLabel(imageIcon);
        JLabel_PontoDePartida = new javax.swing.JLabel();
        jButton_ExecutaAlgoritmo = new javax.swing.JButton();
        jLabel_LegendaVertice = new javax.swing.JLabel();
        jLabel_LegendaCusto = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList_Cidades = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane_CaminhoMinimo = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane_TodosDados = new javax.swing.JTextPane();
        jLabel_CaminhoMinimo = new javax.swing.JLabel();
        jLabel_TodosDados = new javax.swing.JLabel();
        jLabel_LegendaImagem = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Solução de Rotas - Black Desert Online");
        setResizable(false);

        Mapa.setBackground(new java.awt.Color(51, 255, 51));

        JLabel_PontoDePartida.setText("  Ponto de Partida:");

        jButton_ExecutaAlgoritmo.setText("Executar Algoritmo Dijkstra");
        jButton_ExecutaAlgoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExecutaAlgoritmoActionPerformed(evt);
            }
        });

        jLabel_LegendaVertice.setText("Números Pretos: Vértices/Cidades");

        jLabel_LegendaCusto.setText("Números Amarelos: Peso/Custo");

        jList_Cidades.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = grafo.getDescricao();
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList_Cidades);

        jTextPane_CaminhoMinimo.setEditable(false);
        jScrollPane1.setViewportView(jTextPane_CaminhoMinimo);

        jTextPane_TodosDados.setEditable(false);
        jScrollPane2.setViewportView(jTextPane_TodosDados);

        jLabel_CaminhoMinimo.setText(" Caminho Mínimo");

        jLabel_TodosDados.setText(" Todos os Dados");

        jLabel_LegendaImagem.setText("Mapa Black Desert Online");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_CaminhoMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_TodosDados)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Mapa, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_LegendaImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel_LegendaVertice)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel_LegendaCusto)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLabel_PontoDePartida, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton_ExecutaAlgoritmo)
                                .addGap(75, 75, 75)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(JLabel_PontoDePartida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_ExecutaAlgoritmo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Mapa, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_LegendaCusto)
                            .addComponent(jLabel_LegendaVertice)
                            .addComponent(jLabel_LegendaImagem))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_CaminhoMinimo)
                            .addComponent(jLabel_TodosDados))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action do botão de executar algoritmo Dijkstra.
     *
     * Recupera o índice selecionado pelo usuario na lista de vértices/cidades e
 passa como ponto inicial para o algoritmo Dijkstra.
     *
     * @param evt ActionEvent do AWT
     */
    private void jButton_ExecutaAlgoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ExecutaAlgoritmoActionPerformed
        //Recupera o indice selecionado
        int index = jList_Cidades.getSelectedIndex();
        //Verifica se o usuário realmente selecionou algo
        if (index > -1) {
            //Instancia o algoritmo Dijkstra
            Dijkstra dijkstra = new Dijkstra();
            //Executa o algoritmo
            int[] S = dijkstra.algoritmoDijkstra(G, index);
            //Manda os resultados para o método de saída
            mostrarSaida(S, grafo, dijkstra.d, dijkstra.pi);
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, selecione um ponto de partida.");
        }
    }//GEN-LAST:event_jButton_ExecutaAlgoritmoActionPerformed

    /**
     * Método Main de execução da aplicação.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFramePrincipal().setVisible(true);
            }
        });
    }

    /**
     * Exibe o caminho a ser percorrido no Grafo e o custo.
     *
     * @param S Lista a ser percorrido para mostrar o caminho e o custo.
     * @param grafo Grafo a ser trabalhado.
     * @param d Vetor de distância.
     * @param pi Vetor dos pais de um vértice.
     */
    public void mostrarSaida(int[] S, Grafo grafo, int[] d, int[] pi) {
        String[] descricaoResultado = grafo.getDescricao();
        //Quantidade de vértices da lista
        int n = S.length;
        //Percorre os vértices a partir de S 
        String caminhoMinimo = "Caminho mínimo :\n";
        for (int v = 1; v < n; v++) {
            caminhoMinimo += descricaoResultado[pi[S[v]]] + " -> " + descricaoResultado[(S[v])] + "\ncusto: " + d[S[v]] + "\n\n";
        }
        //Imprime o texto do resultado no JTextPane
        jTextPane_CaminhoMinimo.setText(caminhoMinimo);

        String todosDados = "Todos dados:\n";
        for (int i = 0; i < G.length; i++) {
            todosDados += descricaoResultado[pi[i]] + " -> " + descricaoResultado[i] + "\ncusto: " + d[i] + "\n\n";
        }
        //Imprime o texto do resultado no JTextPane
        jTextPane_TodosDados.setText(todosDados);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabel_PontoDePartida;
    private javax.swing.JLabel Mapa;
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton_ExecutaAlgoritmo;
    private javax.swing.JLabel jLabel_CaminhoMinimo;
    private javax.swing.JLabel jLabel_LegendaCusto;
    private javax.swing.JLabel jLabel_LegendaImagem;
    private javax.swing.JLabel jLabel_LegendaVertice;
    private javax.swing.JLabel jLabel_TodosDados;
    private javax.swing.JList<String> jList_Cidades;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane_CaminhoMinimo;
    private javax.swing.JTextPane jTextPane_TodosDados;
    // End of variables declaration//GEN-END:variables
}
